/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users/getById": {
    get: operations["UsersController_getById"];
  };
  "/users/setSettings": {
    post: operations["UsersController_setSettings"];
  };
  "/slangs/myVote": {
    get: operations["SlangsController_myVote"];
  };
  "/slangs/create": {
    post: operations["SlangsController_create"];
  };
  "/slangs/edit": {
    post: operations["SlangsController_edit"];
  };
  "/slangs/delete": {
    post: operations["SlangsController_delete"];
  };
  "/slangs/vote": {
    post: operations["SlangsController_vote"];
  };
  "/bookmarks/create": {
    post: operations["BookmarksController_create"];
  };
  "/bookmarks/remove": {
    post: operations["BookmarksController_remove"];
  };
}

export interface components {
  schemas: {
    Bookmark: {
      id: number;
      slang: components["schemas"]["Slang"];
      date: string;
    };
    Settings: {
      push: boolean;
      im: boolean;
    };
    VKInfoDto: {
      id: number;
      verified: boolean;
      fullName: string;
      avatarUrl: string;
    };
    User: {
      id: number;
      rights: string;
      ref: string;
      registration: string;
      dayLimitDate?: string;
      dayLimitCount?: number;
      slangs: components["schemas"]["Slang"][];
      bookmarks: components["schemas"]["Bookmark"][];
      settings?: components["schemas"]["Settings"];
      vk: components["schemas"]["VKInfoDto"];
    };
    Slang: {
      id: number;
      user?: components["schemas"]["User"];
      type: string;
      cover: string;
      word: string;
      description: string;
      votes: number;
      status: string;
      date: string;
    };
    SetSettingsDto: {
      push: boolean;
      im: boolean;
    };
    Vote: {
      id: number;
      user: components["schemas"]["User"];
      slang: components["schemas"]["Slang"];
      type: string;
    };
    CreateSlangDto: {
      type: "Слово" | "Словосочетание" | "Пословица" | "Фразеологизм";
      cover: string;
      word: string;
      description: string;
    };
    EditSlangDto: {
      type?: "Слово" | "Словосочетание" | "Пословица" | "Фразеологизм";
      cover?: string;
      word?: string;
      description?: string;
      id: number;
    };
    DeleteSlangDto: {
      id: number;
    };
    VoteSlangDto: {
      id: number;
      type: "void" | "down" | "up";
    };
    CreateBookmarkDto: {
      slangId: number;
    };
    RemoveBookmarkDto: {
      id: number;
    };
  };
}

export interface operations {
  UsersController_getById: {
    parameters: {
      query: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      404: unknown;
    };
  };
  UsersController_setSettings: {
    parameters: {};
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetSettingsDto"];
      };
    };
  };
  SlangsController_myVote: {
    parameters: {
      query: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Vote"];
        };
      };
      404: unknown;
    };
  };
  SlangsController_create: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Slang"];
        };
      };
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSlangDto"];
      };
    };
  };
  SlangsController_edit: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Slang"];
        };
      };
      400: unknown;
      403: unknown;
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EditSlangDto"];
      };
    };
  };
  SlangsController_delete: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Slang"];
        };
      };
      403: unknown;
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteSlangDto"];
      };
    };
  };
  SlangsController_vote: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Slang"];
        };
      };
      400: unknown;
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VoteSlangDto"];
      };
    };
  };
  BookmarksController_create: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Bookmark"];
        };
      };
      400: unknown;
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBookmarkDto"];
      };
    };
  };
  BookmarksController_remove: {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Bookmark"];
        };
      };
      403: unknown;
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveBookmarkDto"];
      };
    };
  };
}

export interface external {}
